{"mappings":"AEE8B,KAAA,IAAnB,OAAO,OAAO,GAEvB,OAAO,OAAO,CAAG,CACf,QAAS,CAEP,YAAa,AAAC,IACZ,QAAQ,GAAG,CAAC,+BAAgC,GACrC,QAAQ,OAAO,CAAC,CAAE,QAAS,CAAA,EAAO,MAAO,yBAA0B,IAG5E,UAAW,CACT,YAAa,AAAC,IACZ,QAAQ,GAAG,CAAC,uCACd,CACF,CACF,CAEF,EAGA,QAAQ,GAAG,CAAC,2CDpBd,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAM,EAAc,SAAS,aAAa,CAAC,oBACrC,EAAe,SAAS,aAAa,CAAC,qBACtC,EAAU,SAAS,aAAa,CAAC,YAwBvC,EAAY,gBAAgB,CAAC,QAtB7B,WACE,EAAQ,SAAS,CAAC,MAAM,CAAC,aAEzB,sBAAsB,KACpB,sBAAsB,KACpB,EAAQ,SAAS,CAAC,GAAG,CAAC,UACxB,EACF,GACA,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAG,QACjC,GAcA,EAAa,gBAAgB,CAAC,QAZ9B,WACE,EAAQ,SAAS,CAAC,MAAM,CAAC,WACzB,EAAQ,gBAAgB,CAAC,gBAAiB,SAAS,EAAQ,CAAC,EACnC,cAAnB,EAAE,YAAY,GAChB,EAAQ,SAAS,CAAC,GAAG,CAAC,aACtB,EAAQ,mBAAmB,CAAC,gBAAiB,GAEjD,GACA,SAAS,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAG,EACjC,EAIF","sources":["<anon>","src/index.js","src/js/browser-polyfill.js"],"sourcesContent":["(function () {\n//функционал открытия-закрытия мобильного меню\n// Проверяем, если `window.browser` ещё не определён\nif (typeof window.browser === \"undefined\") {\n    // Определяем глобальный объект `browser`\n    window.browser = {\n        runtime: {\n            // Метод для отправки сообщений\n            sendMessage: (message)=>{\n                console.log(\"\\u041F\\u043E\\u043F\\u044B\\u0442\\u043A\\u0430 \\u043E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0435:\", message);\n                return Promise.resolve({\n                    success: false,\n                    error: \"browser API \\u043D\\u0435 \\u0434\\u043E\\u0441\\u0442\\u0443\\u043F\\u043D\\u043E\"\n                });\n            },\n            // Метод для добавления слушателя сообщений\n            onMessage: {\n                addListener: (callback)=>{\n                    console.log(\"\\u041F\\u043E\\u043F\\u044B\\u0442\\u043A\\u0430 \\u0434\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u043B\\u0443\\u0448\\u0430\\u0442\\u0435\\u043B\\u044C \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0439\");\n                }\n            }\n        }\n    };\n    console.log(\"\\u041F\\u043E\\u043B\\u043D\\u044B\\u0439 \\u043F\\u043E\\u043B\\u0438\\u0444\\u0438\\u043B\\u043B \\u0434\\u043B\\u044F browser API \\u0441\\u043E\\u0437\\u0434\\u0430\\u043D\");\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const menuOpenBtn = document.querySelector(\"[data-menu-open]\");\n    const menuCloseBtn = document.querySelector(\"[data-menu-close]\");\n    const sidebar = document.querySelector(\".sidebar\");\n    function openMenu() {\n        sidebar.classList.remove(\"is-hidden\");\n        // Используем requestAnimationFrame для обеспечения применения начальных стилей\n        requestAnimationFrame(()=>{\n            requestAnimationFrame(()=>{\n                sidebar.classList.add(\"is-open\");\n            });\n        });\n        document.body.style.overflow = \"hidden\";\n    }\n    function closeMenu() {\n        sidebar.classList.remove(\"is-open\");\n        sidebar.addEventListener(\"transitionend\", function handler(e) {\n            if (e.propertyName === \"transform\") {\n                sidebar.classList.add(\"is-hidden\");\n                sidebar.removeEventListener(\"transitionend\", handler);\n            }\n        });\n        document.body.style.overflow = \"\";\n    }\n    menuOpenBtn.addEventListener(\"click\", openMenu);\n    menuCloseBtn.addEventListener(\"click\", closeMenu);\n});\n\n})();\n//# sourceMappingURL=index.671df6ca.js.map\n","//функционал открытия-закрытия мобильного меню\r\nimport './js/browser-polyfill';\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const menuOpenBtn = document.querySelector('[data-menu-open]');\r\n  const menuCloseBtn = document.querySelector('[data-menu-close]');\r\n  const sidebar = document.querySelector('.sidebar');\r\n\r\n  function openMenu() {\r\n    sidebar.classList.remove('is-hidden');\r\n    // Используем requestAnimationFrame для обеспечения применения начальных стилей\r\n    requestAnimationFrame(() => {\r\n      requestAnimationFrame(() => {\r\n        sidebar.classList.add('is-open');\r\n      });\r\n    });\r\n    document.body.style.overflow = 'hidden';\r\n  }\r\n\r\n  function closeMenu() {\r\n    sidebar.classList.remove('is-open');\r\n    sidebar.addEventListener('transitionend', function handler(e) {\r\n      if (e.propertyName === 'transform') {\r\n        sidebar.classList.add('is-hidden');\r\n        sidebar.removeEventListener('transitionend', handler);\r\n      }\r\n    });\r\n    document.body.style.overflow = '';\r\n  }\r\n\r\n  menuOpenBtn.addEventListener('click', openMenu);\r\n  menuCloseBtn.addEventListener('click', closeMenu);\r\n});\r\n","\r\n// Проверяем, если `window.browser` ещё не определён\r\nif (typeof window.browser === 'undefined') {\r\n  // Определяем глобальный объект `browser`\r\n  window.browser = {\r\n    runtime: {\r\n      // Метод для отправки сообщений\r\n      sendMessage: (message) => {\r\n        console.log('Попытка отправить сообщение:', message);\r\n        return Promise.resolve({ success: false, error: 'browser API не доступно' });\r\n      },\r\n      // Метод для добавления слушателя сообщений\r\n      onMessage: {\r\n        addListener: (callback) => {\r\n          console.log('Попытка добавить слушатель сообщений');\r\n        }\r\n      }\r\n    },\r\n   \r\n  };\r\n  \r\n\r\n  console.log('Полный полифилл для browser API создан');\r\n}\r\n"],"names":["window","browser","runtime","sendMessage","message","console","log","Promise","resolve","success","error","onMessage","addListener","callback","document","addEventListener","menuOpenBtn","querySelector","menuCloseBtn","sidebar","classList","remove","requestAnimationFrame","add","body","style","overflow","handler","e","propertyName","removeEventListener"],"version":3,"file":"index.671df6ca.js.map"}